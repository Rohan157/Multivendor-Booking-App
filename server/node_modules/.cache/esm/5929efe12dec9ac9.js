let User,Stripe,queryString;_2de‍.x([["createConnectAccount",()=>createConnectAccount],["getAccountStatus",()=>getAccountStatus],["getAccountBalance",()=>getAccountBalance],["payoutSetting",()=>payoutSetting]]);_2de‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_2de‍.w("stripe",[["default",["Stripe"],function(v){Stripe=v}]]);_2de‍.w("query-string",[["default",["queryString"],function(v){queryString=v}]]);



const stripe = Stripe(process.env.STRIPE_SECRET);

       const createConnectAccount = async (req, res) => {
  // 1. find user from db
  const user = await User.findById(req.user._id).exec();
  _2de‍.g.console.log("USER ==>", user);

  // 2. if user don't have stripe_account_id yet, create new now
  if (!user.stripe_account_id) {
    const account = await stripe.accounts.create({
      type: "express",
    });
    _2de‍.g.console.log("ACCOUNT ===>", account);
    user.stripe_account_id = account.id;
    user.save();
  }
  // 3. Create login link based on account id (for frontend to complete onboarding)
  let accountLink = await stripe.accountLinks.create({
    account: user.stripe_account_id,
    refresh_url: process.env.STRIPE_REDIRECT_URL,
    return_url: process.env.STRIPE_REDIRECT_URL,
    type: "account_onboarding",
  });
  //prefill any info such as email
  accountLink = Object.assign(accountLink, {
    "stripe_user[email": user.email || undefined,
  });
  // console.log("ACCOUNT LINK", accountLink);
  let link = `${accountLink.url}?${queryString.stringify(accountLink)}`;
  //   console.log("LOGIN LINK", link);
  res.send(link);

  // 4. update payment schedule (optional, default is 2 days)
};

const updateDelayDays = async (accountId) => {
  const account = await stripe.account.update(accountId, {
    settings: {
      payouts: {
        schedule: {
          delay_days: 7,
        },
      },
    },
  });
  return account;
};

       const getAccountStatus = async (req, res) => {
  const user = await User.findById(req.user._id).exec();
  const account = await stripe.accounts.retrieve(user.stripe_account_id);
  //update payment delay days
  const updatedAccount = await updateDelayDays(account.id);
  console.log("USER ACCOUNT RETRIEVE");
  const updatedUser = await User.findByIdAndUpdate(
    user._id,
    {
      stripe_seller: updatedAccount,
    },
    { new: true }
  )
    .select("-password")
    .exec();
  res.json(updatedUser);
};

       const getAccountBalance = async (req, res) => {
  const user = await User.findById(req.user._id).exec();
  try {
    const balance = await stripe.balance.retrieve({
      stripeAccount: user.stripe_account_id,
    });
    _2de‍.g.console.log("BALANCE ===>", balance);
    // res.json(balance);
  } catch (err) {
    _2de‍.g.console.log(err);
  }
};

       const payoutSetting = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).exec();
    const loginLink = await stripe.account.createLoginLink(
      user.stripe_account_id,
      {
        redirect_url: process.env.STRIPE_SETTING_REDIRECT_URL,
      }
    );
    // console.log("LOGIN LINK FOR PAYOUT SETTING", loginLink);
    res.json(loginLink);
  } catch (err) {
    _2de‍.g.console.log("STRIPE PAYOUT SETTING ERROR", err);
  }
};
